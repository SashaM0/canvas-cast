{"version":3,"sources":["App.js"],"names":["CanvasCast","settings","ip","width","height","brightness","type","customMap","layoutSerpentine","stageResized","wsOpen","ws","connect","ui","status","WebSocket","binaryType","onopen","console","log","uiBrightness","onclose","onerror","evt","onmessage","data","close","setTimeout","window","addEventListener","e","statusId","elemStatus","document","querySelector","elemStatusTxt","dataset","innerHTML","getElementById","value","innerText","send","p","matrixSerpentine","position","y","Math","floor","x","reverseX","canvas","scaleW","innerWidth","scaleH","innerHeight","scale","newWidth","newHeight","style","resizeStage","buffer","context","ArrayBuffer","getBufferSize","bytearray","Uint8Array","getContext","antialias","depth","i","canvasData","canvasMapping","pixel","getImageData","readPixels","RGBA","UNSIGNED_BYTE","radius","engine","drawGuideP5js","drawGuideCanvas","ctx","error","length","beginPath","lineWidth","strokeStyle","ellipse","PI","stroke","diameter","noFill","strokeWeight","pixelPosition","matrixClass","canvasCast"],"mappings":";;;AAsZA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA/YA,QAAA,qBAGMA,IAAAA,EAAAA,WA4YN,SAAA,IAAA,EAAA,KAAA,GAAA,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAvYOC,MAAAA,SAAAA,GACEC,KAAAA,GAAKD,EAASC,GACdC,KAAAA,MAAQF,EAASE,MACjBC,KAAAA,OAASH,EAASG,OAClBC,KAAAA,WAAaJ,EAASI,WACtBC,KAAAA,KAAOL,EAASK,MAAQ,KACxBC,KAAAA,UAAYN,EAASM,YAAa,EAClCC,KAAAA,iBAAmBP,EAASO,mBAAoB,EAEhDC,KAAAA,cAAe,EACfC,KAAAA,QAAS,EACTC,KAAAA,IAAK,EAGLC,KAAAA,UAGAC,KAAAA,OAsXT,CAAA,IAAA,UAhXY,MAAA,WAAA,IAAA,EAAA,KAEHC,KAAAA,OAAO,GACPH,KAAAA,GAAK,IAAII,UAAkB,QAAA,OAAA,KAAKb,GAArC,MACKS,KAAAA,GAAGK,WAAa,cAGhBL,KAAAA,GAAGM,OAAS,WAEfC,QAAQC,IAAI,kBACZ,EAAKT,QAAS,EACd,EAAKI,OAAO,GAGZ,EAAKM,gBAIFT,KAAAA,GAAGU,QAAU,WAEhBH,QAAQC,IAAI,mBACZ,EAAKT,QAAS,EACd,EAAKI,OAAO,IAITH,KAAAA,GAAGW,QAAU,SAACC,GAEjBL,QAAQC,IAAII,GACZ,EAAKT,OAAO,IAITH,KAAAA,GAAGa,UAAY,SAACD,GACXA,OAAAA,EAAIE,MACL,IAAA,YACH,EAAKX,OAAO,GACZ,MAEG,IAAA,OACH,EAAKH,GAAGe,QACRC,WAAW,WAAM,OAAA,EAAKb,OAAO,IAAI,KACjC,MAEG,IAAA,SACH,EAAKH,GAAGe,QACR,MAEG,IAAA,QACH,EAAKZ,OAAO,GACZ,MAEF,QAEEI,QAAQC,IAAmBI,eAAAA,OAAAA,EAAIE,SAKrCG,OAAOC,iBAAiB,SAAU,SAAAC,GAChC,EAAKnB,GAAGe,YAoTd,CAAA,IAAA,SA5SSK,MAAAA,SAAAA,GACCC,IAAAA,EAAaC,SAASC,cAAc,kBACpCC,EAAgBF,SAASC,cAAc,qBAErCH,OAAAA,GACD,KAAA,EACHC,EAAWI,QAAQtB,OAAS,SAC5BqB,EAAcE,UAAY,SAC1B,MAEG,KAAA,EACHL,EAAWI,QAAQtB,OAAS,aAC5BqB,EAAcE,UAAY,gBAC1B,MAEG,KAAA,EACHL,EAAWI,QAAQtB,OAAS,OAC5BqB,EAAcE,UAAY,YAC1B,MAEG,KAAA,EACHL,EAAWI,QAAQtB,OAAS,QAC5BqB,EAAcE,UAAY,mBAC1B,MAEG,KAAA,EACHL,EAAWI,QAAQtB,OAAS,OAC5BqB,EAAcE,UAAY,wBAiRlC,CAAA,IAAA,KAtQO,MAAA,WAAA,IAAA,EAAA,KAIGhC,EAAa4B,SAASK,eAAe,qBAE3CjC,EAAWkC,MAAQ,KAAKlC,WAExBA,EAAWwB,iBAAiB,QAAS,WACnC,EAAKT,iBAMca,SAASC,cAAc,oBAC/BM,UAAY,KAAKtC,GAK9B0B,OAAOC,iBAAiB,SAAU,WAChC,EAAKpB,cAAe,IACnB,KA+OP,CAAA,IAAA,eAzOiB,MAAA,WACPJ,IAAAA,EAAa4B,SAASK,eAAe,qBACvC,KAAK5B,SACFL,KAAAA,WAAaA,EAAWkC,MACxB5B,KAAAA,GAAG8B,KAAmB,cAAA,OAAA,KAAKpC,gBAqOtC,CAAA,IAAA,gBA1NgBqC,MAAAA,SAAAA,GACR,OAAA,KAAKlC,iBACA,KAAKmC,iBAAiBD,GAExBA,IAsNX,CAAA,IAAA,mBAxMmBA,MAAAA,SAAAA,GACXE,IAAAA,EAGEC,EAAIC,KAAKC,MAAML,EAAI,KAAKvC,OACxB6C,EAAIN,EAAK,KAAKvC,MAAQ0C,EACxBA,GAAI,EAAJA,EAAU,CACNI,IAAAA,EAAY,KAAK9C,MAAQ,EAAK6C,EACpCJ,EAA2C,GAA9BC,EAAI,KAAK1C,MAAS8C,QAG/BL,EAAe,EAAJF,EAENE,OAAAA,IA2LX,CAAA,IAAA,cAnLcM,MAAAA,SAAAA,GAEJC,IAAAA,EAA8B,GAApBvB,OAAOwB,WAAoB,KAAKjD,MAC1CkD,EAA+B,GAArBzB,OAAO0B,YAAqB,KAAKlD,OAG3CmD,EAASF,EAASF,EAAUE,EAASF,EACrCK,EAAW,KAAKrD,MAAQoD,EACxBE,EAAY,KAAKrD,OAASmD,EAGhCL,EAAOQ,MAAMvD,MAAWqD,GAAAA,OAAAA,EAAxB,MACAN,EAAOQ,MAAMtD,OAAYqD,GAAAA,OAAAA,EAZP,MAebhD,KAAAA,cAAe,IAoKxB,CAAA,IAAA,OA5JOyC,MAAAA,SAAAA,GAOC,GALC,KAAKzC,cACHkD,KAAAA,YAAYT,GAId,KAAKxC,OAAN,CAKEkD,IAIFC,EAJED,EAAS,IAAIE,YAAY,KAAKC,iBAC9BC,EAAY,IAAIC,WAAWL,EAAQ,EAAG,KAAKG,iBAI/B,OAAd,KAAKzD,KACPuD,EAAUX,EAAOgB,WAAW,MAEP,UAAd,KAAK5D,OACZuD,EAAUX,EAAOgB,WAAW,QAAS,CACnCC,WAAW,EACXC,OAAO,KAKN,IAAA,IAAIC,EAAI,EAAGA,EAAK,KAAKN,gBAAkBM,GAAK,EAAG,CAC5C3B,IAAAA,EAAI2B,EAAI,EAGRC,EAAa,KAAKC,cAAc7B,GAClC8B,OAAJ,EAGkB,OAAd,KAAKlE,KACPkE,EAAQX,EAAQY,aAAaH,EAAWtB,EAAGsB,EAAWzB,EAAG,EAAG,GAAGpB,KAE1C,UAAd,KAAKnB,OACZkE,EAAQ,IAAIP,WAAW,GACvBJ,EAAQa,WAAWJ,EAAWtB,EAAGsB,EAAWzB,EAAG,EAAG,EAAGgB,EAAQc,KAAMd,EAAQe,cAAeJ,IAI5FR,EAAUM,EAAW1B,UAAY4B,EAAM,GACvCR,EAAUM,EAAW1B,SAAW,GAAK4B,EAAM,GAC3CR,EAAUM,EAAW1B,SAAW,GAAK4B,EAAM,GAIxC7D,KAAAA,GAAG8B,KAAKuB,MAyGjB,CAAA,IAAA,QAjGQd,MAAAA,SAAAA,EAAQ2B,EAAQC,GACZA,OAAAA,GACD,IAAA,OAEH,YADKC,KAAAA,cAAcF,GAGrB,QACOG,KAAAA,gBAAgB9B,EAAQ2B,MA0FrC,CAAA,IAAA,kBAjFkB3B,MAAAA,SAAAA,EAAQ2B,GAEhBI,IAAAA,EAAM/B,EAAOgB,WAAW,MAC1B,IAACe,EACGC,MAAAA,MAAM,oBAIT,IAAA,IAAIb,EAAI,EAAGA,EAAI,KAAK9D,UAAU4E,OAAQd,IACzCY,EAAIG,YACJH,EAAII,UAAY,EAChBJ,EAAIK,YAAc,QAClBL,EAAIM,QAAQ,KAAKhF,UAAU8D,GAAGrB,EAAG,KAAKzC,UAAU8D,GAAGxB,EAAGgC,EAAQA,EAAQ/B,KAAK0C,GAAK,EAAG,EAAG,EAAI1C,KAAK0C,IAC/FP,EAAIQ,SAEJR,EAAIG,YACJH,EAAII,UAAY,EAChBJ,EAAIK,YAAc,QAClBL,EAAIM,QAAQ,KAAKhF,UAAU8D,GAAGrB,EAAG,KAAKzC,UAAU8D,GAAGxB,EAAGgC,EAAS,EAAGA,EAAS,EAAG/B,KAAK0C,GAAK,EAAG,EAAG,EAAI1C,KAAK0C,IACvGP,EAAIQ,WA8DV,CAAA,IAAA,gBAtDgBZ,MAAAA,SAAAA,GAEP,IADCa,IAAAA,EAAoB,EAATb,EACRR,EAAI,EAAGA,EAAI,KAAK9D,UAAU4E,OAAQd,IACzCsB,SACAC,aAAa,GAEbH,OAAO,SACPF,QAAQ,KAAKhF,UAAU8D,GAAGrB,EAAG,KAAKzC,UAAU8D,GAAGxB,EAAG6C,EAAUA,GAE5DD,OAAO,SACPF,QAAQ,KAAKhF,UAAU8D,GAAGrB,EAAG,KAAKzC,UAAU8D,GAAGxB,EAAG6C,EAAW,EAAGA,EAAW,KA4CjF,CAAA,IAAA,gBApCkB,MAAA,WACV,OAAA,KAAKnF,UACwB,EAAxB,KAAKA,UAAU4E,OAIjB,KAAKhF,MAAQ,KAAKC,OAAS,IA8BtC,CAAA,IAAA,gBAvBgBoE,MAAAA,SAAAA,GAER,GAAA,KAAKjE,UACA,MAAA,CACLsC,EAAG,KAAKtC,UAAUiE,GAAO3B,EACzBG,EAAG,KAAKzC,UAAUiE,GAAOxB,EACzBJ,SAAkB,EAAR4B,GAKR3B,IAAAA,EAAIC,KAAKC,MAAMyB,EAAQ,KAAKrE,OAC3B,MAAA,CACL0C,EAAAA,EACAG,EAAGwB,EAAS3B,EAAI,KAAK1C,MACrByC,SAAU,KAAKiD,cAAcrB,QAQnC,EA5YMxE,GA2YA8F,EAAc,IAAI9F,EACxB4B,OAAOmE,WAAaD","file":"App.js","sourceRoot":"../src","sourcesContent":["/**\n * Canvas Cast\n * Cast any <canvas> element to an LED Matrix\n * over WebSockets with an Arduino/ESP8266.\n */\n\n// Styles\nimport './css/styles.scss';\n\n\nclass CanvasCast {\n  /**\n   * Init()\n   * @param {Obj} settings\n   */\n  init(settings) {\n    this.ip = settings.ip;\n    this.width = settings.width;\n    this.height = settings.height;\n    this.brightness = settings.brightness;\n    this.type = settings.type || '2d';\n    this.customMap = settings.customMap || false;\n    this.layoutSerpentine = settings.layoutSerpentine || false;\n\n    this.stageResized = false;\n    this.wsOpen = false;\n    this.ws = false;\n\n    // Connect WS\n    this.connect();\n\n    // Everything UI\n    this.ui();\n  }\n\n  /**\n   * Connect to WS deivce\n   */\n  connect() {\n    // Open WebSocket connection\n    this.status(1);\n    this.ws = new WebSocket(`ws://${this.ip}/`);\n    this.ws.binaryType = 'arraybuffer';\n\n    // WS open event\n    this.ws.onopen = () => {\n      // eslint-disable-next-line\n      console.log('WebSocket open');\n      this.wsOpen = true;\n      this.status(1);\n\n      // Set default brightness\n      this.uiBrightness();\n    };\n\n    // WS closed event\n    this.ws.onclose = () => {\n      // eslint-disable-next-line\n      console.log('WebSocket close');\n      this.wsOpen = false;\n      this.status(0);\n    };\n\n    // WS error event\n    this.ws.onerror = (evt) => {\n      // eslint-disable-next-line\n      console.log(evt);\n      this.status(3);\n    };\n\n    // WS message received\n    this.ws.onmessage = (evt) => {\n      switch (evt.data) {\n        case 'Connected':\n          this.status(2);\n          break;\n\n        case 'Busy':\n          this.ws.close();\n          setTimeout(() => this.status(4), 250);\n          break;\n\n        case 'Closed':\n          this.ws.close();\n          break;\n\n        case 'Error':\n          this.status(3);\n          break;\n\n        default:\n          // eslint-disable-next-line\n          console.log(`WS message: ${evt.data}`);\n      }\n    };\n\n    // Close connection on page exit.\n    window.addEventListener('unload', e => {\n      this.ws.close();\n    });\n  }\n\n  /**\n   * Status bar\n   * @param {Int} statusId Statis ID number\n   */\n  status(statusId) {\n    const elemStatus = document.querySelector('.wsBar .status');\n    const elemStatusTxt = document.querySelector('.wsBar .statusTxt');\n\n    switch (statusId) {\n      case 0:\n        elemStatus.dataset.status = 'closed';\n        elemStatusTxt.innerHTML = 'closed';\n        break;\n\n      case 1:\n        elemStatus.dataset.status = 'connecting';\n        elemStatusTxt.innerHTML = 'connecting...';\n        break;\n\n      case 2:\n        elemStatus.dataset.status = 'open';\n        elemStatusTxt.innerHTML = 'connected';\n        break;\n\n      case 3:\n        elemStatus.dataset.status = 'error';\n        elemStatusTxt.innerHTML = 'error connecting';\n        break;\n\n      case 4:\n        elemStatus.dataset.status = 'busy';\n        elemStatusTxt.innerHTML = 'too many connected';\n        break;\n\n      default:\n    }\n  }\n\n\n  /**\n   * UI\n   */\n  ui() {\n    /**\n     * Brightness control\n     */\n    const brightness = document.getElementById('matrix-brightness');\n    // Set UI default\n    brightness.value = this.brightness;\n    // Brightness controller\n    brightness.addEventListener('input', () => {\n      this.uiBrightness();\n    });\n\n    /**\n     * IP address\n     */\n    const elemStatusIp = document.querySelector('.wsBar .statusIP');\n    elemStatusIp.innerText = this.ip;\n\n    /**\n     * On resize\n     */\n    window.addEventListener('resize', () => {\n      this.stageResized = false;\n    }, false);\n  }\n\n  /**\n   * Change brightness of Matrix\n   */\n  uiBrightness() {\n    const brightness = document.getElementById('matrix-brightness');\n    if (this.wsOpen) {\n      this.brightness = brightness.value;\n      this.ws.send(`BRIGHTNESS:${this.brightness}`);\n    }\n  }\n\n\n  /**\n   * Get the pixels position in the matrix line.\n   *\n   * @param  {Int} p Pixel position in canvas\n   * @return {Int} Position in Matrix\n   */\n  pixelPosition(p) {\n    if (this.layoutSerpentine) {\n      return this.matrixSerpentine(p);\n    }\n    return p;\n  }\n\n\n  /**\n   * Matrix Serpentine Layout\n   *\n   * If your matrix is in a zigzag serpentine layout\n   * this code will order the data array being sent\n   * to the matrix.\n   *\n   * @param  {Int} p Pixel position in canvas\n   * @return {Int} Position in Matrix\n   */\n  matrixSerpentine(p) {\n    let position;\n\n    // Odd rows get reversed\n    const y = Math.floor(p / this.width);\n    const x = p - (this.width * y);\n    if (y & 0x01) {\n      const reverseX = (this.width - 1) - x;\n      position = ((y * this.width) + reverseX) * 3;\n    }\n    else {\n      position = p * 3;\n    }\n    return position;\n  }\n\n\n  /**\n   * Resize stage in browser for usability.\n   * @param {DOM Canvas} canvas\n   */\n  resizeStage(canvas) {\n    // Get W/H scaling\n    const scaleW = (window.innerWidth * 0.9) / this.width;\n    const scaleH = (window.innerHeight * 0.8) / this.height;\n\n    // Which size to scale by?\n    const scale = (scaleH < scaleW) ? scaleH : scaleW;\n    const newWidth = this.width * scale;\n    const newHeight = this.height * scale;\n\n    // Update stage canvas size\n    canvas.style.width = `${newWidth}px`;\n    canvas.style.height = `${newHeight}px`;\n\n    // Mark as resized\n    this.stageResized = true;\n  }\n\n\n  /**\n   * Cast canvas to matrix.\n   * @param {DOM Canvas} canvas\n   */\n  cast(canvas) {\n    // Resized?\n    if (!this.stageResized) {\n      this.resizeStage(canvas);\n    }\n\n    // Is WS open?\n    if (!this.wsOpen) {\n      return;\n    }\n\n    // Create 8 bit array buffer\n    const buffer = new ArrayBuffer(this.getBufferSize());\n    const bytearray = new Uint8Array(buffer, 0, this.getBufferSize());\n\n    // 2D or WebGL\n    let context;\n    if (this.type === '2d') {\n      context = canvas.getContext('2d');\n    }\n    else if (this.type === 'webgl') {\n      context = canvas.getContext('webgl', {\n        antialias: false,\n        depth: false,\n      });\n    }\n\n    // Build and order data array\n    for (let i = 0; i < (this.getBufferSize()); i += 3) {\n      const p = i / 3;\n\n      // Get canvas mapping info\n      const canvasData = this.canvasMapping(p);\n      let pixel;\n\n      // Get pixel data\n      if (this.type === '2d') {\n        pixel = context.getImageData(canvasData.x, canvasData.y, 1, 1).data;\n      }\n      else if (this.type === 'webgl') {\n        pixel = new Uint8Array(4);\n        context.readPixels(canvasData.x, canvasData.y, 1, 1, context.RGBA, context.UNSIGNED_BYTE, pixel);\n      }\n\n      // Add pixel data to array\n      bytearray[canvasData.position] = pixel[0];\n      bytearray[canvasData.position + 1] = pixel[1];\n      bytearray[canvasData.position + 2] = pixel[2];\n    }\n\n    // Send data!\n    this.ws.send(bytearray);\n  }\n\n  /**\n   * Render pixel guidelines for custom matrix\n   * @param {DOM Canvas} canvas DOM Canvas\n   * @param {Int} radius Pixel radius of guide pixel\n   */\n  guide(canvas, radius, engine) {\n    switch (engine) {\n      case 'p5js':\n        this.drawGuideP5js(radius);\n        return;\n\n      default:\n        this.drawGuideCanvas(canvas, radius);\n    }\n  }\n\n  /**\n   * Draw pixel guide onto a canvas element.\n   * @param {DOM Canvas} canvas DOM Canvas\n   * @param {Int} radius Pixel radius of guide pixel\n   */\n  drawGuideCanvas(canvas, radius) {\n    // Find canvas\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      throw error('Canvas not found');\n    }\n\n    // Draw the pixel map guide\n    for (var i = 0; i < this.customMap.length; i++) {\n      ctx.beginPath();\n      ctx.lineWidth = 1;\n      ctx.strokeStyle = 'black';\n      ctx.ellipse(this.customMap[i].x, this.customMap[i].y, radius, radius, Math.PI / 4, 0, 2 * Math.PI);\n      ctx.stroke();\n\n      ctx.beginPath();\n      ctx.lineWidth = 1;\n      ctx.strokeStyle = 'white';\n      ctx.ellipse(this.customMap[i].x, this.customMap[i].y, radius - 1, radius - 1, Math.PI / 4, 0, 2 * Math.PI);\n      ctx.stroke();\n    }\n  }\n\n  /**\n   * Draw pixel guide onto a p5js canvas.\n   * @param {Int} radius Pixel radius of guide pixel\n   */\n  drawGuideP5js(radius) {\n    const diameter = radius * 2\n    for (var i = 0; i < this.customMap.length; i++) {\n      noFill();\n      strokeWeight(1);\n\n      stroke('black');\n      ellipse(this.customMap[i].x, this.customMap[i].y, diameter, diameter);\n\n      stroke('white');\n      ellipse(this.customMap[i].x, this.customMap[i].y, diameter - 1, diameter - 1);\n    }\n  }\n\n  /**\n   * Returns require graphic buffer size\n   * @return {Int} Graphic buffer size\n   */\n  getBufferSize() {\n    if (this.customMap) {\n      return this.customMap.length * 3;\n    }\n\n    // Else return default matrix\n    return this.width * this.height * 3\n  }\n\n  /**\n   * Maps canvas position to Matrix position\n   * @return {Obj} {x, y, position}\n   */\n  canvasMapping(pixel) {\n    // Custom pixel mapping\n    if (this.customMap) {\n      return {\n        y: this.customMap[pixel].y,\n        x: this.customMap[pixel].x,\n        position: pixel * 3,\n      };\n    }\n\n    // Standard matrix\n    const y = Math.floor(pixel / this.width);\n    return {\n      y,\n      x: pixel - (y * this.width),\n      position: this.pixelPosition(pixel),\n    };\n  }\n}\n\n\n// Export WS Matrix\nconst matrixClass = new CanvasCast();\nwindow.canvasCast = matrixClass;\n"]}